{"ast":null,"code":"var _jsxFileName = \"/Users/tony/Downloads/sandbox/src/components/InputSelect/index.tsx\",\n    _s = $RefreshSig$();\n\nimport Downshift from \"downshift\";\nimport { useCallback, useState, useRef, useEffect } from \"react\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function InputSelect(_ref) {\n  _s();\n\n  let {\n    label,\n    defaultValue,\n    onChange: consumerOnChange,\n    items,\n    parseItem,\n    isLoading,\n    loadingLabel\n  } = _ref;\n  const [selectedValue, setSelectedValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null);\n  const [dropdownPosition, setDropdownPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const rootRef = useRef(null);\n  const onChange = useCallback(selectedItem => {\n    if (selectedItem === null) {\n      return;\n    }\n\n    consumerOnChange(selectedItem);\n    setSelectedValue(selectedItem);\n  }, [consumerOnChange]);\n  useEffect(() => {\n    const updatePosition = () => {\n      if (rootRef.current) {\n        const rect = rootRef.current.getBoundingClientRect();\n        setDropdownPosition({\n          top: rect.bottom,\n          left: rect.left\n        });\n      }\n    };\n\n    window.addEventListener('scroll', updatePosition);\n    window.addEventListener('resize', updatePosition);\n    return () => {\n      window.removeEventListener('scroll', updatePosition);\n      window.removeEventListener('resize', updatePosition);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Downshift, {\n    id: \"RampSelect\",\n    onChange: onChange,\n    selectedItem: selectedValue,\n    itemToString: item => item ? parseItem(item).label : \"\",\n    children: _ref2 => {\n      let {\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue\n      } = _ref2;\n      const toggleProps = getToggleButtonProps();\n      const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampInputSelect--root\",\n        ref: rootRef,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"RampText--s RampText--hushed\",\n          ...getLabelProps(),\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampBreak--xs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampInputSelect--input\",\n          onClick: toggleProps.onClick,\n          children: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames(\"RampInputSelect--dropdown-container\", {\n            \"RampInputSelect--dropdown-container-opened\": isOpen\n          }),\n          ...getMenuProps(),\n          style: {\n            position: 'fixed',\n            top: `${dropdownPosition.top}px`,\n            left: `${dropdownPosition.left}px`\n          },\n          children: renderItems()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }, this);\n\n      function renderItems() {\n        if (!isOpen) {\n          return null;\n        }\n\n        if (isLoading) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: [loadingLabel, \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 22\n          }, this);\n        }\n\n        if (items.length === 0) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: \"No items\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 22\n          }, this);\n        }\n\n        return items.map((item, index) => {\n          const parsedItem = parseItem(item);\n          return /*#__PURE__*/_jsxDEV(\"div\", { ...getItemProps({\n              key: parsedItem.value,\n              index,\n              item,\n              className: classNames(\"RampInputSelect--dropdown-item\", {\n                \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                \"RampInputSelect--dropdown-item-selected\": (parsedSelectedItem === null || parsedSelectedItem === void 0 ? void 0 : parsedSelectedItem.value) === parsedItem.value\n              })\n            }),\n            children: parsedItem.label\n          }, parsedItem.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 19\n          }, this);\n        });\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 7\n  }, this);\n}\n\n_s(InputSelect, \"jqaGOgtC2WrtVKEkazQI4MscKaw=\");\n\n_c = InputSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputSelect\");","map":{"version":3,"names":["Downshift","useCallback","useState","useRef","useEffect","classNames","InputSelect","label","defaultValue","onChange","consumerOnChange","items","parseItem","isLoading","loadingLabel","selectedValue","setSelectedValue","dropdownPosition","setDropdownPosition","top","left","rootRef","selectedItem","updatePosition","current","rect","getBoundingClientRect","bottom","window","addEventListener","removeEventListener","item","getItemProps","getLabelProps","getMenuProps","isOpen","highlightedIndex","getToggleButtonProps","inputValue","toggleProps","parsedSelectedItem","onClick","position","renderItems","length","map","index","parsedItem","key","value","className"],"sources":["/Users/tony/Downloads/sandbox/src/components/InputSelect/index.tsx"],"sourcesContent":["import Downshift from \"downshift\"\nimport { useCallback, useState, useRef, useEffect } from \"react\"\nimport classNames from \"classnames\"\nimport { DropdownPosition, GetDropdownPositionFn, InputSelectOnChange, InputSelectProps } from \"./types\"\n\nexport function InputSelect<TItem>({\n                                     label,\n                                     defaultValue,\n                                     onChange: consumerOnChange,\n                                     items,\n                                     parseItem,\n                                     isLoading,\n                                     loadingLabel,\n                                   }: InputSelectProps<TItem>) {\n  const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null)\n  const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({\n    top: 0,\n    left: 0,\n  })\n  const rootRef = useRef<HTMLDivElement>(null)\n\n  const onChange = useCallback<InputSelectOnChange<TItem>>(\n      (selectedItem) => {\n        if (selectedItem === null) {\n          return\n        }\n\n        consumerOnChange(selectedItem)\n        setSelectedValue(selectedItem)\n      },\n      [consumerOnChange]\n  )\n\n  useEffect(() => {\n    const updatePosition = () => {\n      if (rootRef.current) {\n        const rect = rootRef.current.getBoundingClientRect()\n        setDropdownPosition({\n          top: rect.bottom,\n          left: rect.left,\n        })\n      }\n    }\n\n    window.addEventListener('scroll', updatePosition)\n    window.addEventListener('resize', updatePosition)\n\n    return () => {\n      window.removeEventListener('scroll', updatePosition)\n      window.removeEventListener('resize', updatePosition)\n    }\n  }, [])\n\n  return (\n      <Downshift<TItem>\n          id=\"RampSelect\"\n          onChange={onChange}\n          selectedItem={selectedValue}\n          itemToString={(item) => (item ? parseItem(item).label : \"\")}\n      >\n        {({\n            getItemProps,\n            getLabelProps,\n            getMenuProps,\n            isOpen,\n            highlightedIndex,\n            selectedItem,\n            getToggleButtonProps,\n            inputValue,\n          }) => {\n          const toggleProps = getToggleButtonProps()\n          const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem)\n\n          return (\n              <div className=\"RampInputSelect--root\" ref={rootRef}>\n                <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n                  {label}\n                </label>\n                <div className=\"RampBreak--xs\" />\n                <div\n                    className=\"RampInputSelect--input\"\n                    onClick={toggleProps.onClick}\n                >\n                  {inputValue}\n                </div>\n\n                <div\n                    className={classNames(\"RampInputSelect--dropdown-container\", {\n                      \"RampInputSelect--dropdown-container-opened\": isOpen,\n                    })}\n                    {...getMenuProps()}\n                    style={{\n                      position: 'fixed',\n                      top: `${dropdownPosition.top}px`,\n                      left: `${dropdownPosition.left}px`,\n                    }}\n                >\n                  {renderItems()}\n                </div>\n              </div>\n          )\n\n          function renderItems() {\n            if (!isOpen) {\n              return null\n            }\n\n            if (isLoading) {\n              return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>\n            }\n\n            if (items.length === 0) {\n              return <div className=\"RampInputSelect--dropdown-item\">No items</div>\n            }\n\n            return items.map((item, index) => {\n              const parsedItem = parseItem(item)\n              return (\n                  <div\n                      key={parsedItem.value}\n                      {...getItemProps({\n                        key: parsedItem.value,\n                        index,\n                        item,\n                        className: classNames(\"RampInputSelect--dropdown-item\", {\n                          \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                          \"RampInputSelect--dropdown-item-selected\":\n                              parsedSelectedItem?.value === parsedItem.value,\n                        }),\n                      })}\n                  >\n                    {parsedItem.label}\n                  </div>\n              )\n            })\n          }\n        }}\n      </Downshift>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}